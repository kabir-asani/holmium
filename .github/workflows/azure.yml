name: Build and Deploy to Azure Container Apps

on:
  push:
    tags:
      - "*"

env:
  AZURE_REGION: centralindia
  RESOURCE_GROUP: Holmium
  CONTAINER_APPS_ENVIRONMENT: holmium-container-environment
  LOG_ANALYTICS_WORKSPACE: holmium-log-analytics-workspace
  ACR_REGISTRY: holmium1si16cs060.azurecr.io
  ACR_REPOSITORY_NAME: holmium
  APP_NAME: holmium
  CONTAINER_APP_NAME: holmium
  TARGET_PORT: 3000
  SUBSCRIPTION_ID: 480bb9b7-b15c-40cc-a96a-9d221c425df3

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_GITHUB_ACTIONS }}

      - name: Ensure appropriate "Resource Group" exists
        run: |
          echo "🔍 Checking if resource group '${{ env.RESOURCE_GROUP }}' exists..."
          if az group show --name ${{ env.RESOURCE_GROUP }} > /dev/null 2>&1; then
            echo "✅ Resource group '${{ env.RESOURCE_GROUP }}' found."
          else
            echo "❌ Resource group '${{ env.RESOURCE_GROUP }}' not found."
            echo "💡 Please create the resource group manually before running this workflow."
            exit 1
          fi

      - name: Create an appropriate "Log Analytics Workspace" if it doesn't already exists
        run: |
          if ! az monitor log-analytics workspace show --resource-group ${{ env.RESOURCE_GROUP }} --workspace-name ${{ env.LOG_ANALYTICS_WORKSPACE }} > /dev/null 2>&1; then
            az monitor log-analytics workspace create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --workspace-name ${{ env.LOG_ANALYTICS_WORKSPACE }} \
              --location ${{ env.AZURE_REGION }}
          fi
          WORKSPACE_ID=$(az monitor log-analytics workspace show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --workspace-name ${{ env.LOG_ANALYTICS_WORKSPACE }} \
            --query customerId --output tsv)
          WORKSPACE_KEY=$(az monitor log-analytics workspace get-shared-keys \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --workspace-name ${{ env.LOG_ANALYTICS_WORKSPACE }} \
            --query primarySharedKey --output tsv)
          echo "::add-mask::$WORKSPACE_ID"
          echo "::add-mask::$WORKSPACE_KEY"
          echo "WORKSPACE_ID=$WORKSPACE_ID" >> $GITHUB_ENV
          echo "WORKSPACE_KEY=$WORKSPACE_KEY" >> $GITHUB_ENV

      - name: Create an appropriate "Azure Container Registry" if it doesn't already exists
        run: |
          REGISTRY_NAME=$(echo "${{ env.ACR_REGISTRY }}" | cut -d'.' -f1)
          if ! az acr show --name $REGISTRY_NAME --resource-group ${{ env.RESOURCE_GROUP }} > /dev/null 2>&1; then
            az acr create \
              --name $REGISTRY_NAME \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --sku Standard \
              --admin-enabled true
          fi
          ACR_USERNAME=$(az acr credential show --name $REGISTRY_NAME --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show --name $REGISTRY_NAME --query passwords[0].value -o tsv)
          echo "::add-mask::$ACR_USERNAME"
          echo "::add-mask::$ACR_PASSWORD"
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV

      - name: Create an appropriate "Container Apps Environment" if it doesn't already exists
        run: |
          if ! az containerapp env show --name ${{ env.CONTAINER_APPS_ENVIRONMENT }} --resource-group ${{ env.RESOURCE_GROUP }} > /dev/null 2>&1; then
            az containerapp env create \
              --name ${{ env.CONTAINER_APPS_ENVIRONMENT }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --location ${{ env.AZURE_REGION }} \
              --logs-workspace-id $WORKSPACE_ID \
              --logs-workspace-key $WORKSPACE_KEY
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to "Azure Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Build and push Docker image based off of the given Dockerfile
        uses: docker/build-push-action@v6.15.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.ACR_REGISTRY }}/${{ env.ACR_REPOSITORY_NAME }}:${{ github.ref_name }}

      - name: Create/update "Container App" with real image
        run: |
          az containerapp up \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment ${{ env.CONTAINER_APPS_ENVIRONMENT }} \
            --ingress external \
            --target-port ${{ env.TARGET_PORT }} \
            --location ${{ env.AZURE_REGION }}
            --registry-server ${{ env.ACR_REGISTRY }}
            --registry-username ${{ env.ACR_USERNAME }}
            --registry-password ${{ env.ACR_PASSWORD }}
            --image ${{ env.ACR_REGISTRY }}/${{ env.ACR_REPOSITORY_NAME }}:${{ github.ref_name }}
